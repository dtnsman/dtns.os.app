{"version":3,"file":"js/661.ccada05f.js","mappings":"oKAAA,IAAIA,EAAS,WAAkB,IAAIC,EAAIC,KAAKC,EAAGF,EAAIG,MAAMD,GAAG,OAAOA,EAAG,MAAM,CAACE,IAAI,YAAYC,YAAY,MAAM,CAAGL,EAAIM,aAA0FJ,EAAG,YAAY,CAACG,YAAY,QAAQE,GAAG,CAAC,MAAQP,EAAIQ,cAAc,CAACR,EAAIS,GAAG,QAAtJP,EAAG,YAAY,CAACG,YAAY,QAAQE,GAAG,CAAC,MAAQP,EAAIU,QAAQ,CAACV,EAAIS,GAAG,QAA0FP,EAAG,MAAM,CAACG,YAAY,oBAAoB,CAACH,EAAG,MAAM,CAACG,YAAY,SAASM,MAAO,IAChWX,EAAIY,eAAeZ,EAAIa,iBAC1BC,MAAOd,EAAIe,qBAAqBf,EAAIa,gBAAgBC,OAAS,KAC7DE,OAAQhB,EAAIe,qBAAqBf,EAAIa,gBAAgBG,QAAU,OAC/DhB,EAAIiB,GAAIjB,EAAIkB,UAAU,SAASC,EAAKC,GAAO,OAAOlB,EAAG,mBAAmB,CAACmB,IAAID,EAAME,MAAM,CAAC,OAASH,IAAQ,IAAE,MAAM,EAClI,EACGI,EAAkB,G,kDCyEtB,OACAC,WAAAA,CAAAC,iBAAAA,EAAAA,GACAC,MAAAA,CACApB,aAAAA,CACAqB,KAAAA,QACAC,SAAAA,IAGAC,OACA,OACAX,SAAAA,GACAY,cAAAA,KACAjB,gBAAAA,KAEA,EAKAkB,eACAC,QAAAA,IAAAA,mBAAAA,KAAAA,UAAAA,KAAAA,iBACA,EACA,gBAEA,kEAEA,eAEAA,QAAAA,IAAAA,WAAAA,KAAAA,WAAAA,EAAAA,EAAAA,IAAAA,KAAAA,iBAEA,2CAGAA,QAAAA,IAAAA,eAAAA,KAAAA,UAAAA,KAAAA,kBAEA,gCACAC,OAAAA,QAAAA,KAAAA,QAEA,gDACAD,QAAAA,IAAAA,iBAAAA,KAAAA,UAAAA,IAEA,GACA,wCACA,gBAEA,mBAEA,0DACA,iDACAA,QAAAA,IAAAA,mBAAAA,EAAAA,QAAAA,KAAAA,QAAAA,QAAAA,KAAAA,KAAAA,QAAAA,SAEA,wCACA,uBACAb,EAAAA,MAAAA,IAAAA,KAAAA,QAAAA,QAAAA,MACA,WACAA,EAAAA,QAAAA,GAAAA,KAAAA,OAKA,CAEA,+BAqBA,EACAe,cAEA,EACA,gBAOA,EACAC,gBAEA,EACAC,YAEA,EACAC,QAAAA,CACAC,SADA,KAEA1B,eAFA,KAGAG,qBAHA,KAKAwB,UAEA,qCAEA,mEAGA,sCAEA,qEAEA,EAEA7B,QAEA,sBACA,EAEA,oBAIA,oDACA,yBACAsB,QAAAA,IAAAA,YAAAA,EAAAA,MAAAA,MAAAA,IAAAA,EAAAA,MAAAA,OAAAA,WAAAA,EAAAA,MAAAA,SACAA,QAAAA,IAAAA,YAAAA,EAAAA,MAAAA,MAAAA,IAAAA,EAAAA,MAAAA,SACAQ,EAAAA,EAAAA,IAAAA,EAAAA,CAAAC,iBACAC,MAAAC,IAEA,oCACAC,EAAAA,aAAAA,WAAAA,cACAA,EAAAA,KAAAA,EACAA,EAAAA,OAAAA,IAEAC,OAAAC,IACAd,QAAAA,MAAAA,8BAAAA,EAAAA,IAEAe,QAAA,YACAf,QAAAA,IAAAA,YAAAA,EAAAA,MAAAA,MACA,IChOqP,I,UCQjPgB,GAAY,OACd,EACAjD,EACAwB,GACA,EACA,KACA,WACA,MAIF,EAAeyB,EAAiB,O","sources":["webpack://dtns.creator/./src/views/View2.vue","webpack://dtns.creator/src/views/View2.vue","webpack://dtns.creator/./src/views/View2.vue?7dde","webpack://dtns.creator/./src/views/View2.vue?e8a6"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{ref:\"container\",staticClass:\"bg\"},[(!_vm.isScreenshot)?_c('el-button',{staticClass:\"close\",on:{\"click\":_vm.close}},[_vm._v(\"关闭\")]):_c('el-button',{staticClass:\"close\",on:{\"click\":_vm.htmlToImage}},[_vm._v(\"确定\")]),_c('div',{staticClass:\"canvas-container\"},[_c('div',{staticClass:\"canvas\",style:({\n                ..._vm.getCanvasStyle(_vm.canvasStyleData),\n                width: _vm.changeStyleWithScale(_vm.canvasStyleData.width) + 'px',\n                height: _vm.changeStyleWithScale(_vm.canvasStyleData.height) + 'px',\n            })},_vm._l((_vm.copyData),function(item,index){return _c('ComponentWrapper',{key:index,attrs:{\"config\":item}})}),1)])],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div ref=\"container\" class=\"bg\">\r\n        <el-button v-if=\"!isScreenshot\" class=\"close\" @click=\"close\">关闭</el-button>\r\n        <el-button v-else class=\"close\" @click=\"htmlToImage\">确定</el-button>\r\n        <div class=\"canvas-container\">\r\n            <div\r\n                class=\"canvas\"\r\n                :style=\"{\r\n                    ...getCanvasStyle(canvasStyleData),\r\n                    width: changeStyleWithScale(canvasStyleData.width) + 'px',\r\n                    height: changeStyleWithScale(canvasStyleData.height) + 'px',\r\n                }\"\r\n            >\r\n                <ComponentWrapper\r\n                    v-for=\"(item, index) in copyData\"\r\n                    :key=\"index\"\r\n                    :config=\"item\"\r\n                />\r\n            </div>\r\n            <!-- <div\r\n                class=\"canvas\"\r\n                :style=\"{\r\n                    ...getCanvasStyle(canvasStyleData),\r\n                    width: changeStyleWithScale(canvasStyleData.width) + 'px',\r\n                    height: changeStyleWithScale(canvasStyleData.height) + 'px',\r\n                }\"\r\n            >\r\n                <ComponentWrapper\r\n                    v-for=\"(item, index) in copyData\"\r\n                    :key=\"index\"\r\n                    :config=\"item\"\r\n                />\r\n            </div>\r\n            <div\r\n                class=\"canvas\"\r\n                :style=\"{\r\n                    ...getCanvasStyle(canvasStyleData),\r\n                    width: changeStyleWithScale(canvasStyleData.width) + 'px',\r\n                    height: changeStyleWithScale(canvasStyleData.height) + 'px',\r\n                }\"\r\n            >\r\n                <ComponentWrapper\r\n                    v-for=\"(item, index) in copyData\"\r\n                    :key=\"index\"\r\n                    :config=\"item\"\r\n                />\r\n            </div>\r\n            <div\r\n                class=\"canvas\"\r\n                :style=\"{\r\n                    ...getCanvasStyle(canvasStyleData),\r\n                    width: changeStyleWithScale(canvasStyleData.width) + 'px',\r\n                    height: changeStyleWithScale(canvasStyleData.height) + 'px',\r\n                }\"\r\n            >\r\n                <ComponentWrapper\r\n                    v-for=\"(item, index) in copyData\"\r\n                    :key=\"index\"\r\n                    :config=\"item\"\r\n                />\r\n            </div> -->\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { getStyle, getCanvasStyle } from '@/utils/style'\r\nimport { mapState } from 'vuex'\r\nimport ComponentWrapper from '@/components/Editor/ComponentWrapper'\r\n\r\n// import ComponentList from '@/components/ComponentList' // 左侧列表组件\r\n// import componentList from '@/custom-component/component-list' // 左侧列表数据\r\n\r\nimport { changeStyleWithScale } from '@/utils/translate'\r\nimport { toPng, getFontEmbedCSS } from 'html-to-image'\r\n// import domtoimage from 'dom-to-image'\r\nimport { deepCopy } from '@/utils/utils'\r\n// import { Parser , serialize , parseFragment , defaultTreeAdapter }   from \"parse5\"\r\nlet tmpCom = null \r\nexport default {\r\n    components: { ComponentWrapper },\r\n    props: {\r\n        isScreenshot: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n    },\r\n    data() {\r\n        return {\r\n            copyData: [],\r\n            componentData: null,\r\n            canvasStyleData: null,\r\n        }\r\n    },\r\n    // computed: mapState([\r\n    //     'componentData',\r\n    //     'canvasStyleData',\r\n    // ]),\r\n    beforeCreate() {\r\n        console.log('canvasStyleData:' + JSON.stringify(this.canvasStyleData))\r\n    },\r\n    async created() {\r\n        // eslint-disable-next-line\r\n        if (window.g_dchatManager) window.g_dchatManager.setViewContext(this)\r\n        \r\n        this.restore()\r\n        \r\n        console.log('tmpJson:' + JSON.stringify(deepCopy(this.componentData)))\r\n        // this.$set(this, 'copyData', deepCopy(this.componentData))\r\n        this.copyData = deepCopy(this.componentData)\r\n\r\n        // 开始绑定pop.lang\r\n        console.log('this.config:' + JSON.stringify(this.canvasStyleData))\r\n        // eslint-disable-next-line\r\n        this.poplang = new PopRuntime({})\r\n        window.poplang = this.poplang // 这里设置为全局对象。\r\n        // 不使用this.canvasStyleDate.poplang（会导致无限重绘，导致堆栈崩溃）\r\n        const protocolCache = localStorage.getItem('protocol_config')\r\n        console.log('protocolCache:' + JSON.stringify(protocolCache))\r\n\r\n        if (protocolCache) {\r\n            this.poplang.setProtocol(JSON.parse(protocolCache))\r\n            this.isok = 'ok'\r\n        } else {\r\n            this.isok = false\r\n        }\r\n        await this.poplang.runScript(null, this.canvasStyleData.code, true)\r\n        let beforeCreateRet = await this.poplang.op(null, 'beforeCreate')\r\n        console.log('beforeCreateRet:', beforeCreateRet, '$ret:', this.poplang.context.$ret, this.poplang.context)\r\n        \r\n        for (let i = 0; i < this.copyData.length; i++) {\r\n            let item = this.copyData[i]\r\n            item.xdata = { ...this.poplang.context.$ret } // Object.assign({}, this.poplang.context.$ret)\r\n            if (item.poplang) {\r\n                item.poplang.op(null, 'init')\r\n                // setTimeout(() => {\r\n                //     item.poplang.runScript(null, item.code)\r\n                // }, 100)\r\n            }\r\n        }\r\n        \r\n        this.poplang.op(null, 'created')\r\n\r\n        // // 开始绑定pop.lang\r\n        // console.log('this.config:' + JSON.stringify(this.canvasStyleData))\r\n        // // eslint-disable-next-line\r\n        // this.poplang = new PopRuntime(this.canvasStyleData)\r\n        // window.poplang = this.poplang // 这里设置为全局对象。\r\n        // // 不使用this.canvasStyleDate.poplang（会导致无限重绘，导致堆栈崩溃）\r\n        // const protocolCache = localStorage.getItem('protocol_config')\r\n        // console.log('protocolCache:' + JSON.stringify(protocolCache))\r\n\r\n        // if (protocolCache) {\r\n        //     this.poplang.setProtocol(JSON.parse(protocolCache))\r\n        //     this.isok = 'ok'\r\n        // } else {\r\n        //     this.isok = false\r\n        // }\r\n        // await this.poplang.runScript(null, this.canvasStyleData.code, true)\r\n        // await this.poplang.op(null, 'beforeCreate')\r\n\r\n        // this.poplang.op(null, 'created')\r\n    },\r\n    beforeMount() {\r\n        // this.poplang.op(null, 'beforeMount')\r\n    },\r\n    async mounted() {\r\n        // 会有一定的异步延时性，所以等待上一个操作完成。\r\n        // let This = this\r\n        // setTimeout(async () => {\r\n        //     let ret = await This.poplang.op(null, 'mounted')\r\n        //     console.log('ret:' + JSON.stringify(ret))\r\n        // }, 100)\r\n    },\r\n    beforeDestroy() {\r\n        // this.poplang.op(null, 'beforeDestroy')\r\n    },\r\n    destroyed() {\r\n        // this.poplang.op(null, 'destroyed')\r\n    },\r\n    methods: {\r\n        getStyle,\r\n        getCanvasStyle,\r\n        changeStyleWithScale,\r\n\r\n        restore() {\r\n            // 用保存的数据恢复画布\r\n            if (localStorage.getItem('canvasData')) {\r\n                //  this.$store.commit('setComponentData', JSON.parse(localStorage.getItem('canvasData')))\r\n                this.componentData = JSON.parse(localStorage.getItem('canvasData'))\r\n            }\r\n\r\n            if (localStorage.getItem('canvasStyle')) {\r\n                // this.$store.commit('setCanvasStyle', JSON.parse(localStorage.getItem('canvasStyle')))\r\n                this.canvasStyleData = JSON.parse(localStorage.getItem('canvasStyle'))\r\n            }\r\n        },\r\n\r\n        close() {\r\n            // this.$emit('close')\r\n            this.$router.push('/')\r\n        },\r\n\r\n        async htmlToImage() {\r\n            // let w = changeStyleWithScale(this.canvasStyleData.width) \r\n            // let h = changeStyleWithScale(this.canvasStyleData.height) \r\n            // console.log('w:' + w + ' h:' + h)\r\n            let ele = this.$refs.container.querySelector('.canvas')\r\n            const fontEmbedCss = await getFontEmbedCSS(ele)\r\n            console.log('ele-info:' + ele.style.width + ',' + ele.style.height + 'padding:' + ele.style.padding)\r\n            console.log('ele-info:' + ele.style.width + ',' + ele.style.height)\r\n            toPng(ele, { fontEmbedCss })\r\n            .then(dataUrl => {\r\n                // console.log('dataUrl:' + dataUrl)\r\n                const a = document.createElement('a')\r\n                a.setAttribute('download', 'screenshot')\r\n                a.href = dataUrl\r\n                a.click()\r\n            })\r\n            .catch(error => {\r\n                console.error('oops, something went wrong!', error)\r\n            })\r\n            .finally(this.close)\r\n            console.log('ele-info:' + ele.style.width)\r\n        },\r\n    },\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.bg {\r\n    width: 100%;\r\n    height: 100%;\r\n    top: 0;\r\n    left: 0;\r\n    position: fixed;\r\n    background: rgb(0, 0, 0, .5);\r\n    z-index: 10;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    overflow: auto;\r\n    padding: 0px;\r\n\r\n    .canvas-container {\r\n        width: calc(100% - 40px);\r\n        height: calc(100% - 120px);\r\n        overflow: auto;\r\n\r\n        .canvas {\r\n            background: #fff;\r\n            position: relative;\r\n            margin: auto;\r\n        }\r\n    }\r\n\r\n    .close {\r\n        position: absolute;\r\n        right: 20px;\r\n        top: 20px;\r\n    }\r\n}\r\n</style>\r\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./View2.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./View2.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./View2.vue?vue&type=template&id=0c096f66&scoped=true&\"\nimport script from \"./View2.vue?vue&type=script&lang=js&\"\nexport * from \"./View2.vue?vue&type=script&lang=js&\"\nimport style0 from \"./View2.vue?vue&type=style&index=0&id=0c096f66&prod&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"0c096f66\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","ref","staticClass","isScreenshot","on","htmlToImage","_v","close","style","getCanvasStyle","canvasStyleData","width","changeStyleWithScale","height","_l","copyData","item","index","key","attrs","staticRenderFns","components","ComponentWrapper","props","type","default","data","componentData","beforeCreate","console","window","beforeMount","beforeDestroy","destroyed","methods","getStyle","restore","toPng","fontEmbedCss","then","dataUrl","a","catch","error","finally","component"],"sourceRoot":""}